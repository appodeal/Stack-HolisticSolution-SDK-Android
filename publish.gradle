apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

/**
 * Gradle file for submit aar builds to maven repo.
 * Required params:
 * repo - target maven repository;
 * uname - user name for authorization;
 * upassword - user password for authorization.
 *
 * Example: 'YOUR_REQUIRED_TASK_NAME' -Partifactory_repo='YOUR_REPOSITORY_NAME' -Partifactory_username='YOUR_USER_NAME" -Partifactory_password='YOUR_ARTIFACTORY_USER_NAME'
 */

artifactory {
    contextUrl = 'https://artifactory.appodeal.com/artifactory'
    publish {
        repository {
            if (project.hasProperty("repo")) {
                repoKey = repo
                println "Artifactory repo: $repo"
            }
            if (project.hasProperty("uname")) {
                username = uname
                println "Artifactory username: $uname"
            }
            if (project.hasProperty("upassword")) {
                password = upassword
                println "Artifactory password: $upassword"
            }
        }
        defaults {
            publications("_${project.name}_")
            publishArtifacts = true
            publishPom = true
        }
    }
}

def PUBLISH_GROUP = "Artifactory publishing"
def core = project(":sdk")
def full = project(":sdk-full")

afterEvaluate {
    publishing {
        publications {
            "_${project.name}_"(MavenPublication) {
                groupId = project.publishGroupId
                artifactId = project.hasProperty('publishArtifactId') ? publishArtifactId : project.name
                version = obtainAarVersion(project)
                artifact "${project.buildDir}/outputs/aar/${project.name}-release.aar"
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    if (project.name == full.name) {
                        List<Project> components = new ArrayList<>()
                        collectServices().forEach { components.add(it) }
                        collectConnectors().forEach { components.add(it) }
                        collectRegulators().forEach { components.add(it) }
                        components.forEach { project ->
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', project.ext.publishGroupId)
                            dependencyNode.appendNode('artifactId', project.name)
                            dependencyNode.appendNode('version', obtainAarVersion(project))
                        }
                    }
                    if (project.name != core.name) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', core.ext.publishGroupId)
                        dependencyNode.appendNode('artifactId', core.ext.publishArtifactId)
                        dependencyNode.appendNode('version', obtainAarVersion(core))
                    }
                    project.configurations.remoteDependency.getDependencies().each { dependency ->
                        if (dependency instanceof ExternalModuleDependency) {
                            println("implementation dependency: " + dependency.properties)

                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dependency.group)
                            dependencyNode.appendNode('artifactId', dependency.name)
                            dependencyNode.appendNode('version', dependency.version)
                            if (dependency.artifacts != null && !dependency.artifacts.isEmpty()) {
                                def type = dependency.artifacts.first().type
                                // We are interested only in 'aar' types
                                if ("aar" == type) {
                                    dependencyNode.appendNode('type', type)
                                }
                            }
                        } else {
                            throw new GradleException("implementation dependency can be used only for ExternalModuleDependencies")
                        }
                    }
                }
            }
        }
    }
}

task uploadAarToArtifactory(dependsOn: [assemble, artifactoryPublish], group: PUBLISH_GROUP)
artifactoryPublish.mustRunAfter(assemble)

task uploadAarToLocal(dependsOn: [assemble, publishToMavenLocal], group: PUBLISH_GROUP)
publishToMavenLocal.mustRunAfter(assemble)
