import groovy.json.JsonSlurper

apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

/** Specific key for group publishing tasks */

artifactory {
    contextUrl = 'https://artifactory.appodeal.com/artifactory'
    publish {
        repository {
            if (project.hasProperty("repo")) {
                repoKey = repo
                println "Artifactory repo: $repo"
            }
            if (project.hasProperty("uname")) {
                username = uname
                println "Artifactory username: $uname"
            }
            if (project.hasProperty("upassword")) {
                password = upassword
                println "Artifactory password: $upassword"
            }
        }
        defaults {
            publications("_${project.name}_")
            publishArtifacts = true
            publishPom = true
        }
    }
}

project.afterEvaluate {
    publishing {
        publications {
            "_${project.name}_"(MavenPublication) {
                groupId = publishGroupId
                artifactId = project.hasProperty('publishArtifactId') ? publishArtifactId : project.name
                version = obtainHSComponentAarVersion(project)
                artifact "${project.buildDir}/outputs/aar/${project.name}-release.aar"
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    // Including remote dependencies if they exists
                    includeRemoteDependencies(
                            "${buildDir}/publish/dependencies.json",
                            dependenciesNode)
                }
            }
        }
    }
}

void includeRemoteDependencies(String dependenciesFilePath, Node dependenciesNode) {
    // If dependencies info file exists than process it
    def dependenciesFile = file(dependenciesFilePath)
    if (dependenciesFile.exists()) {
        def dependenciesExt = new JsonSlurper().parse(dependenciesFile)
        dependenciesExt.forEach { dep ->
            // Add dependency from dependencies info file
            addDependency(dependenciesNode, dep, null, dep.exclusions)
        }
    }
}

static Node addDependency(Node dependenciesNode, element, String scope, exclusions) {
    def type = null
    try {
        type = element.type
    } catch (ignore) {
    }
    return addDependency(
            dependenciesNode,
            element.groupId,
            element.artifactId,
            element.version,
            type,
            scope,
            exclusions)
}

static Node addDependency(Node dependenciesNode,
                          String groupId,
                          String artifactId,
                          String version,
                          String type,
                          String scope,
                          List exclusions) {
    def dependencyNode = dependenciesNode.appendNode('dependency')
    dependencyNode.appendNode('groupId', groupId)
    dependencyNode.appendNode('artifactId', artifactId)
    dependencyNode.appendNode('version', version)
    if (type != null) {
        dependencyNode.appendNode('type', type)
    }
    if (scope != null) {
        dependencyNode.appendNode('scope', scope)
    }
    def exclusionsList = []
    def forceExclusions = [
            [
                    groupId   : 'com.android.support',
                    artifactId: 'support-v4'
            ]
    ]
    // We exclude some dependencies since they can affect publisher builds and we already override
    // them in our SDK-Core artifact.
    // Note: we should implement force exclusions only for 3rd party dependencies
    if (!groupId.contains('com.appodeal') && forceExclusions.find {
        it.groupId == groupId && it.artifactId == artifactId
    } == null) {
        exclusionsList.addAll(forceExclusions)
    }
    // If dependency has self exclusions than add them too
    if (exclusions != null) {
        exclusionsList.addAll(exclusions.findAll { exclusion ->
            forceExclusions.find {
                exclusion.groupId == it.groupId && exclusion.artifactId == it.artifactId
            } == null
        })
    }
    if (!exclusionsList.isEmpty()) {
        def exclusionsNode = dependencyNode.appendNode("exclusions")
        exclusionsList.forEach { exclude ->
            addExclusion(exclusionsNode, exclude.groupId, exclude.artifactId)
        }
    }
    return dependencyNode
}

static void addExclusion(Node exclusionsNode, String groupId, String artifactId) {
    def exclusionNode = exclusionsNode.appendNode("exclusion")
    if (groupId != null) {
        exclusionNode.appendNode('groupId', groupId)
    }
    if (artifactId != null) {
        exclusionNode.appendNode('artifactId', artifactId)
    }
}

ext {
    PUBLISH_GROUP = "Artifactory publishing"
    publishOutputDir = file(buildDir.path + '/publish')
    publishOutputDependenciesJson = file(publishOutputDir.path + '/dependencies.json')
}
